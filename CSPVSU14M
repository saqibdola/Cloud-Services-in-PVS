
%% PVS Version 6.0 - International Allegro CL Enterprise Edition 9.0 [Linux (x86)] (Jan 14, 2013 3:16)
%% 9.0 [Linux (x86)] (Jan 14, 2013 3:16)
$$$24aprCS.pvs
CSPVS[T:Type]: THEORY 

BEGIN
Time: TYPE =posreal
Data: TYPE+
a:VAR Data
t: VAR Time

TD: TYPE = [# T: sequence[Time], 
              D: sequence[Data], 
              length: nat #]

T1,T2,T3: VAR TD

seq: var sequence[T]
i, n,j: var nat;
suffix(seq, n): sequence[T]  = (LAMBDA i:seq(i+n))

next(T1): TD = T1 WITH [`T:=(suffix(T1`T, 1)),
                        `D:=(suffix(T1`D, 1))]

empty?(T1): bool = (T1`length = 0)

nempty?(T1): bool =
             (length(T1) > 0);

<: (strict_order?[sequence[Time]])
>: (strict_order?[sequence[Time]]) = 
     LAMBDA (s1, s2: sequence[Time]): s2 < s1

I, I1, I2, O: VAR TD

Teq(I,O): bool = T(I) = T(O)
Tle(I,O): bool = T(I) < T(O)
Tgr(I,O): bool = T(I) > T(O)
Deq(I,O): bool= D(I) = D(O)
Dneq(I,O): bool= D(I) /= D(O)

Send(I,O): bool = Teq(I, O) & 
	     	            Deq(I, O)

Buffer(I,O): bool = Tle(I, O) & 
	     	       Tle(O, next(I)) &
		       Deq(I,O)

Sync(I, I2): bool = Teq(I, I2) & Dneq(I,I2)

%A, B, C,D: VAR TD

L1: LEMMA Teq(T1,T2) & Teq(T2,T3) => Teq(T1,T3)

L2: LEMMA Deq(T1,T2) & Deq(T2,T3) => Deq(T1,T3)

L3: LEMMA Tle(T1,T2) & Tle(T2,T3) => Tle(T1,T3)

L4: LEMMA Tgr(T1,T2) & Tgr(T2,T3) => Tgr(T1,T3)

L5: LEMMA Send(T1,T2) & Send(T2,T3) => Send(T1,T3)

L6: LEMMA Buffer(T1,T2) & Buffer(T2,T3) => Tgr(T3,T1)

L7: LEMMA Sync(T1,T3) & Sync(T2,T3) => Teq(T3,T1) & Dneq(T3,T1)

ports: TYPE = sequence[TD]
inp,out: VAR ports

QF1(inp,out): bool= Buffer(inp(1), out(1)) & 
Buffer(inp(1), out(2)) & 
Buffer(inp(1), out(3)) 

T1: THEOREM QF1(inp, out) =>
               Deq(inp(1), out(1))  & 
               Tle(inp(1), out(1)) &
	       Tle(out(1), next(inp(1)))

QF2(inp,out): bool= EXISTS(Y:ports):
Buffer(inp(1), Y(1)) &
Send(Y(1), out(1)) & 
Send(Y(1), out(2)) & 
Send(Y(1), out(3))

T2: THEOREM QF2(inp, out) =>
               Deq(inp(1), out(1))  & 
               Tle(inp(1), out(1)) &
	       Teq(out(1), out(2)) &
	       Teq(out(1), out(3)) & 
	       Tle(out(3), next(inp(1)))

HRS(inp, out): bool=EXISTS(X: ports): 
             Send(inp(1), X(1)) & 
             Send(X(1),out(1)) & 
             Sync(X(1),X(2)) &  
             Send(inp(2), X(2)) & 
             Send(X(2),out(2)) & 
             Sync(X(2),X(3)) & 
             Send(inp(3), X(3)) & 
              Send(X(3),out(3))

T3: THEOREM HRS(inp, out) => Teq(inp(1), out(1)) &
             (Dneq(inp(1),out(2)) OR Dneq(inp(1), inp(3))) 
             & Deq(inp(1), out(1))

Lemma1: LEMMA FORALL(inp, out): inp(1)=out(1) =>
          Send(inp(1),out(1))

Ref: THEOREM QF2(inp, out) => QF1(inp, out)

SCom(inpQF1,outQF1,inpQF2,outQF2:ports): 
bool= EXISTS(i:nat):
  QF1(inpQF1,outQF1) & LET outQF1(i) = inpQF2(1) 
      IN QF2(inpQF2, outQF2)

exp: VAR bool

Conditional(inp, out)(exp): bool=
IF exp THEN QF1(inp, out)
ELSE QF2(inp, out) ENDIF

C1(inp, out): bool= FORALL(i:posnat):Buffer(inp(i), out(i))
C2(inp, out): bool= FORALL(i:posnat):Send(inp(i), out(i))
C3(inp, out): bool= FORALL(i:posnat):Send(inp(i), out(i))

CSRef: THEOREM FORALL(A,B,C:ports): (EXISTS(D:ports):
C1(A, D) & (C2(D,B) & C3(D,C)))=> 
(EXISTS(E,F:ports):(C1(A,E) & C2(E,B)) & 
(C1(A,F) & C3(F,C)))

CSEq: THEOREM FORALL(A,B,C:ports):
IF exp THEN C1(A,B) ELSE C2(A,B) ENDIF & 
               C3(A,B) <=> IF exp THEN C1(A,B) & C3(A,B) 
               ELSE C2(A,B) & C3(A,B) ENDIF

Merge(T1,T2,T3): INDUCTIVE bool=                          
    IF empty?(T2) THEN T3 = T1 
   ELSIF empty?(T1) THEN T3= T2 
   ELSIF T1`T(0) < T2`T(0) THEN   
        T3`T(0) = T1`T(0) & T3`D(0) = T1`D(0) & 
                Merge(next(T1), T2, next(T3))
    ELSIF T1`T(0) > T2`T(0) THEN 
              T3`T(0) = T2`T(0) & T3`D(0) = T2`D(0) & 
                 Merge(T1, next(T2), next(T3))
               ELSE empty?(T3) ENDIF

Router(T1, T2, T3): INDUCTIVE bool=  
             %nempty?(I) IMPLIES
	     T1`T(0) = T3`T(0) & 
	     T1`D(0)= T3`D(0) 
	      & Router(next(T1),T2,next(T3))
	      OR T2`T(0)=T3`T(0) & 
	         T2`D(0)=T3`D(0) 
	      & Router(T1, next(T2), next(T3)) %ELSE Router(I1, I2, I) ENDIF

Locate(a, t, T1, (m: upto(T1`length))): RECURSIVE 
TD =
  (IF m = T1`length
   THEN T1
   ELSIF T1`T(m) = t => T1`D(m) = a 
   THEN T1
    ELSE Locate(a, t, T1, m+1)
     ENDIF)
     MEASURE T1`length - m

Buffern(I,O)(n:posnat): Recursive bool = 
  IF n=1 Then Buffer(I, O) 
  ELSE EXISTS(s3:TD): Buffern(I, s3)(n-1) 
                & Buffer(s3, O) 
  ENDIF 
  MEASURE n

A,B,C,D: VAR TD

RP1(A,B, C,D): bool=
Merge(A,B,C) & Buffer(C,D) & Router(A,B,D)

T4: THEOREM  RP1(A,B,C,D) => 
    Tle(C,D) & Deq(C,D) & (A`D(0) = D`D(0) OR B`D(0) = D`D(0))

RPn(A,B,C,D)(n): bool=  
Merge(A,B,C) & Buffern(C,D)(n+1) & Router(A,B,D)

Lemma2: LEMMA Merge(A,B,C) & Buffern(C,D)(n+1)=> 
                  Tle(C,D) & Deq(C,D)

T5: THEOREM RPn(A,B,C,D)(n) =>
   Tle(C,D) & Deq(C,D) & (A`D(0) = D`D(0) OR B`D(0) = D`D(0))

end CSPVS

$$$24aprCS.prf
(CSPVS
 (lessp_TCC1 0
  (lessp_TCC1-1 nil 3733528650
   ("" (inst 1 "lambda(x,y:sequence[Time]): false")
    (("" (grind) nil nil)) nil)
   ((irreflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (FALSE const-decl "bool" booleans nil)
    (strict_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (sequence type-eq-decl nil sequences nil)
    (Time type-eq-decl nil CSPVS nil) (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (greaterp_TCC1 0
  (greaterp_TCC1-1 nil 3733528650
   ("" (expand "strict_order?")
    (("" (typepred "<")
      (("" (expand "strict_order?")
        (("" (flatten)
          (("" (split)
            (("1" (expand "irreflexive?") (("1" (propax) nil nil)) nil)
             ("2" (expand "transitive?")
              (("2" (skeep)
                (("2" (inst -4 "z" "y" "x") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((< const-decl "(strict_order?[sequence[Time]])" CSPVS nil)
    (pred type-eq-decl nil defined_types nil)
    (sequence type-eq-decl nil sequences nil)
    (Time type-eq-decl nil CSPVS nil) (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (transitive? const-decl "bool" relations nil)
    (irreflexive? const-decl "bool" relations nil)
    (strict_order? const-decl "bool" orders nil))
   nil))
 (L1 0
  (L1-1 nil 3735207917
   ("" (skosimp) (("" (expand "Teq") (("" (assert) nil nil)) nil)) nil)
   ((Teq const-decl "bool" CSPVS nil)) shostak))
 (L2 0
  (L2-1 nil 3735207946
   ("" (skosimp) (("" (expand "Deq") (("" (assert) nil nil)) nil)) nil)
   ((Deq const-decl "bool" CSPVS nil)) shostak))
 (L3 0
  (L3-1 nil 3735207968
   ("" (skeep)
    (("" (expand "Tle")
      (("" (typepred "<")
        (("" (expand "strict_order?")
          (("" (flatten)
            (("" (expand "irreflexive?")
              (("" (expand "transitive?")
                (("" (inst -2 "T(T1)" "T(T2)" "T(T3)")
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Tle const-decl "bool" CSPVS nil)
    (irreflexive? const-decl "bool" relations nil)
    (TD type-eq-decl nil CSPVS nil)
    (Data nonempty-type-decl nil CSPVS nil)
    (transitive? const-decl "bool" relations nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil) (Time type-eq-decl nil CSPVS nil)
    (sequence type-eq-decl nil sequences nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_order? const-decl "bool" orders nil)
    (< const-decl "(strict_order?[sequence[Time]])" CSPVS nil))
   shostak))
 (L4 0
  (L4-1 nil 3735208167
   ("" (skosimp)
    (("" (expand "Tgr")
      (("" (assert)
        (("" (typepred ">")
          (("" (expand "strict_order?")
            (("" (expand "transitive?")
              (("" (flatten)
                (("" (inst -2 "T(T1!1)" "T(T2!1)" "T(T3!1)")
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Tgr const-decl "bool" CSPVS nil)
    (> const-decl "(strict_order?[sequence[Time]])" CSPVS nil)
    (strict_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (sequence type-eq-decl nil sequences nil)
    (Time type-eq-decl nil CSPVS nil) (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (transitive? const-decl "bool" relations nil)
    (TD type-eq-decl nil CSPVS nil)
    (Data nonempty-type-decl nil CSPVS nil))
   shostak))
 (L5 0
  (L5-1 nil 3735208238
   ("" (skosimp)
    (("" (expand "Send")
      (("" (expand "Teq")
        (("" (expand "Deq")
          (("" (flatten)
            (("" (split)
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Send const-decl "bool" CSPVS nil)
    (Deq const-decl "bool" CSPVS nil)
    (Teq const-decl "bool" CSPVS nil))
   shostak))
 (L6 0
  (L6-1 nil 3735208268
   ("" (skosimp)
    (("" (expand "Buffer")
      (("" (expand "Tle")
        (("" (expand "Tgr")
          (("" (assert)
            (("" (flatten)
              (("" (typepred "<")
                (("" (expand "strict_order?")
                  (("" (flatten)
                    (("" (expand "transitive?")
                      (("" (inst -2 "T(T1!1)" "T(T2!1)" "T(T3!1)")
                        (("" (assert) (("" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Buffer const-decl "bool" CSPVS nil)
    (Tgr const-decl "bool" CSPVS nil)
    (transitive? const-decl "bool" relations nil)
    (> const-decl "(strict_order?[sequence[Time]])" CSPVS nil)
    (Deq const-decl "bool" CSPVS nil) (next const-decl "TD" CSPVS nil)
    (irreflexive? const-decl "bool" relations nil)
    (Data nonempty-type-decl nil CSPVS nil)
    (TD type-eq-decl nil CSPVS nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil) (Time type-eq-decl nil CSPVS nil)
    (sequence type-eq-decl nil sequences nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_order? const-decl "bool" orders nil)
    (< const-decl "(strict_order?[sequence[Time]])" CSPVS nil)
    (Tle const-decl "bool" CSPVS nil))
   shostak))
 (L7 0
  (L7-1 nil 3735208360
   ("" (skosimp)
    (("" (expand "Sync")
      (("" (expand "Teq")
        (("" (expand "Dneq")
          (("" (flatten) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((Teq const-decl "bool" CSPVS nil)
    (Dneq const-decl "bool" CSPVS nil)
    (Sync const-decl "bool" CSPVS nil))
   shostak))
 (T1 0
  (T1-1 nil 3733533348
   ("" (skosimp)
    (("" (expand "QF1")
      (("" (expand "Buffer")
        (("" (expand "Tle")
          (("" (expand "Deq")
            (("" (expand "next")
              (("" (assert)
                (("" (flatten)
                  (("" (split)
                    (("1" (propax) nil nil) ("2" (propax) nil nil)
                     ("3" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((QF1 const-decl "bool" CSPVS nil) (Tle const-decl "bool" CSPVS nil)
    (next const-decl "TD" CSPVS nil) (Deq const-decl "bool" CSPVS nil)
    (Buffer const-decl "bool" CSPVS nil))
   shostak))
 (T2 0
  (T2-1 nil 3733534760
   ("" (skosimp)
    (("" (expand "QF2")
      (("" (skolem!)
        (("" (expand "Buffer")
          (("" (expand "Send")
            (("" (expand "Tle")
              (("" (expand "Deq")
                (("" (expand "Teq")
                  (("" (expand "next")
                    (("" (assert)
                      (("" (flatten)
                        (("" (split)
                          (("1" (assert) nil nil)
                           ("2" (assert) nil nil)
                           ("3" (assert) nil nil)
                           ("4" (assert) nil nil)
                           ("5" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((QF2 const-decl "bool" CSPVS nil)
    (Buffer const-decl "bool" CSPVS nil)
    (Tle const-decl "bool" CSPVS nil) (Teq const-decl "bool" CSPVS nil)
    (next const-decl "TD" CSPVS nil) (Deq const-decl "bool" CSPVS nil)
    (Send const-decl "bool" CSPVS nil))
   shostak))
 (T3 0
  (T3-1 nil 3733535293
   ("" (skosimp)
    (("" (expand "HRS")
      (("" (skolem!)
        (("" (expand "Send")
          (("" (expand "Sync")
            (("" (expand "Deq")
              (("" (expand "Teq")
                (("" (expand "Dneq")
                  (("" (flatten)
                    (("" (split)
                      (("1" (assert) nil nil) ("2" (assert) nil nil)
                       ("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Sync const-decl "bool" CSPVS nil)
    (Teq const-decl "bool" CSPVS nil)
    (Dneq const-decl "bool" CSPVS nil)
    (Deq const-decl "bool" CSPVS nil)
    (Send const-decl "bool" CSPVS nil)
    (HRS const-decl "bool" CSPVS nil))
   shostak))
 (Lemma1 0
  (Lemma1-1 nil 3733535591 ("" (skosimp) (("" (grind) nil nil)) nil)
   ((Teq const-decl "bool" CSPVS nil) (Deq const-decl "bool" CSPVS nil)
    (Send const-decl "bool" CSPVS nil))
   shostak))
 (Ref 0
  (Ref-1 nil 3733535584
   ("" (skosimp)
    (("" (expand "QF2")
      (("" (expand "QF1")
        (("" (skolem!)
          (("" (use "Lemma1")
            (("" (expand "Buffer")
              (("" (expand "Send")
                (("" (expand "Deq")
                  (("" (expand "Teq")
                    (("" (expand "Tle")
                      (("" (expand "next")
                        (("" (flatten)
                          (("" (split)
                            (("1" (assert) nil nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((QF1 const-decl "bool" CSPVS nil)
    (Lemma1 formula-decl nil CSPVS nil)
    (ports type-eq-decl nil CSPVS nil) (TD type-eq-decl nil CSPVS nil)
    (Time type-eq-decl nil CSPVS nil) (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sequence type-eq-decl nil sequences nil)
    (Data nonempty-type-decl nil CSPVS nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Send const-decl "bool" CSPVS nil)
    (Teq const-decl "bool" CSPVS nil) (next const-decl "TD" CSPVS nil)
    (Tle const-decl "bool" CSPVS nil) (Deq const-decl "bool" CSPVS nil)
    (Buffer const-decl "bool" CSPVS nil)
    (QF2 const-decl "bool" CSPVS nil))
   shostak))
 (CSRef 0
  (CSRef-1 nil 3733547321
   ("" (skolem * ("A!1" "B!1" "C!1"))
    (("" (flatten)
      (("" (skolem!)
        (("" (inst 1 "D!1" "D!1")
          (("" (flatten)
            (("" (split)
              (("1" (propax) nil nil) ("2" (propax) nil nil)
               ("3" (propax) nil nil) ("4" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Data nonempty-type-decl nil CSPVS nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil) (Time type-eq-decl nil CSPVS nil)
    (TD type-eq-decl nil CSPVS nil))
   shostak))
 (CSEq 0
  (CSEq-1 nil 3735280161
   ("" (skosimp) (("" (lift-if) (("" (assert) nil nil)) nil)) nil) nil
   shostak))
 (Locate_TCC1 0
  (Locate_TCC1-1 nil 3733553981 ("" (subtype-tcc) nil nil) nil nil))
 (Locate_TCC2 0
  (Locate_TCC2-1 nil 3733553981 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil) (Time type-eq-decl nil CSPVS nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Data nonempty-type-decl nil CSPVS nil)
    (sequence type-eq-decl nil sequences nil)
    (TD type-eq-decl nil CSPVS nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (Locate_TCC3 0
  (Locate_TCC3-1 nil 3733553981 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (Buffern_TCC1 0
  (Buffern_TCC1-1 nil 3733553981 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (Buffern_TCC2 0
  (Buffern_TCC2-1 nil 3733553981 ("" (termination-tcc) nil nil) nil
   nil))
 (T4 0
  (T4-2 "" 3735209667
   ("" (skosimp)
    (("" (expand "RP1")
      (("" (expand "Merge")
        (("" (expand "Buffer")
          (("" (expand "Router")
            (("" (flatten)
              (("" (assert)
                (("" (flatten) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Merge inductive-decl "bool" CSPVS nil)
    (Router inductive-decl "bool" CSPVS nil)
    (Buffer const-decl "bool" CSPVS nil)
    (RP1 const-decl "bool" CSPVS nil))
   shostak)
  (T4-1 nil 3733554105
   ("" (skosimp)
    (("" (expand "RP1")
      (("" (expand "Merge")
        (("" (expand "Buffer")
          (("" (expand "Router")
            (("" (flatten)
              (("" (assert)
                (("" (flatten) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Merge inductive-decl "bool" CSPVS nil)
    (Router inductive-decl "bool" CSPVS nil)
    (Buffer const-decl "bool" CSPVS nil)
    (RP1 const-decl "bool" CSPVS nil))
   shostak))
 (Lemma2 0
  (Lemma2-1 nil 3733555033
   ("" (induct "n")
    (("1" (skosimp)
      (("1" (expand "Buffern")
        (("1" (expand "Buffer")
          (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand Buffern -3)
        (("2" (skosimp)
          (("2" (inst -1 "A!1" "B!1" "C!1" "s3!1")
            (("2" (assert)
              (("2" (expand "Buffer")
                (("2" (flatten)
                  (("2" (assert)
                    (("2" (expand "Deq")
                      (("2" (assert)
                        (("2" (hide -2 -3 -4 -7)
                          (("2" (expand "Tle")
                            (("2" (typepred "<")
                              (("2"
                                (expand "strict_order?")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (expand "transitive?")
                                    (("2"
                                      (inst
                                       -2
                                       "T(C!1)"
                                       "T(s3!1)"
                                       "T(D!1)")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (strict_order? const-decl "bool" orders nil)
    (< const-decl "(strict_order?[sequence[Time]])" CSPVS nil)
    (transitive? const-decl "bool" relations nil)
    (Buffer const-decl "bool" CSPVS nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (Deq const-decl "bool" CSPVS nil) (Tle const-decl "bool" CSPVS nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Buffern def-decl "bool" CSPVS nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (Merge inductive-decl "bool" CSPVS nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (TD type-eq-decl nil CSPVS nil) (Time type-eq-decl nil CSPVS nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sequence type-eq-decl nil sequences nil)
    (Data nonempty-type-decl nil CSPVS nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (T5 0
  (T5-1 nil 3733555195
   ("" (skosimp)
    (("" (expand "RPn")
      (("" (flatten)
        (("" (use "Lemma2")
          (("" (assert)
            (("" (flatten)
              (("" (expand "Router")
                (("" (assert)
                  (("" (flatten) (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (RPn const-decl "bool" CSPVS nil)
    (Lemma2 formula-decl nil CSPVS nil) (TD type-eq-decl nil CSPVS nil)
    (Time type-eq-decl nil CSPVS nil) (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (Data nonempty-type-decl nil CSPVS nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Router inductive-decl "bool" CSPVS nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   shostak)))


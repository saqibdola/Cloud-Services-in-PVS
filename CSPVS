
%% PVS Version 6.0 - International Allegro CL Enterprise Edition 9.0 [Linux (x86)] (Jan 14, 2013 3:16)
%% 9.0 [Linux (x86)] (Jan 14, 2013 3:16)
$$$useke.pvs
seke[T:Type]: THEORY 

BEGIN
Time: TYPE =posreal
Data: TYPE+
a:VAR Data

TD: TYPE = [# T: sequence[Time], 
              D: sequence[Data], 
              length: nat, 
	      Token: sequence[nat] #]

T1,T2: VAR TD

seq: var sequence[T]
i, n,j: var nat;
suffix(seq, n): sequence[T]  = (LAMBDA i:seq(i+n))

next(T1): TD = T1 WITH [T:=(suffix(T1`T, 1)),
                        D:=(suffix(T1`D, 1))]

empty?(T1): bool = (T1`length = 0)

nempty?(T1): bool =
             (length(T1) > 0);

<: (strict_order?[sequence[Time]])
>: (strict_order?[sequence[Time]]) = 
     LAMBDA (s1, s2: sequence[Time]): s2 < s1

Teq(T1,T2): bool = T(T1) = T(T2)
Tle(T1,T2): bool = T(T1) < T(T2)
Tgr(T1,T2): bool = T(T1) > T(T2)
Deq(T1, T2): bool= D(T1) = D(T2)
Dneq(T1, T2): bool= D(T1) /= D(T2)

Input, Input2, Output: VAR TD

Send(Input, Output): bool = Teq(Input, Output) & 
	     	            Deq(Input, Output)

Buffer(Input, Output): bool = Tle(Input, Output) & 
	     	      	     Tle(Output, next(Input)) &
			     Deq(Input, Output)

Sync(Input, Input2): bool = Teq(Input, Input2) & Dneq(Input, Input2)

A, B, C,D: VAR TD
L1: LEMMA Teq(A,B) & Teq(B,C) => Teq(A,C)

L2: LEMMA Deq(A,B) & Deq(B,C) => Deq(A,C)

L3: LEMMA Tle(A,B) & Tle(B,C) => Tle(A,C)

L4: LEMMA Tgr(A,B) & Tgr(B,C) => Tgr(A,C)

L5: LEMMA Send(A,B) & Send(B,C) => Send(A,C)

L6: LEMMA Buffer(A,B) & Buffer(B,C) => Tgr(C,A)

l7: LEMMA Sync(A,C) & Sync(B,C) => Teq(C,A) & Dneq(C,A)

I, I1, I2, I3, O1, O2, O3, O4, O5, O6: VAR TD 

QF1(I,O1,O2,O3): bool= EXISTS(X:TD): 
Send(I, X) & Buffer(X, O1) & Buffer(X, O2) & Buffer(X, O3)

T1: THEOREM QF1(I, O1, O2, O3) =>  
               (Deq(O1, I) OR Deq(O2, I) OR Deq(O3, I)) & 
(Tle(I,O1) OR Tle(I, O2) OR Tle(I, O3)) & (Tle(O3, next(I))
              OR Tle(O2, next(I)) OR Tle(O1, next(I)))

T2: THEOREM QF1(I, O1, O2, O3) =>  
               Deq(I,O1)  & Tle(I,O1) & Tle(O1, next(I))


QF2(I, O1, O2, O3): bool= EXISTS(Y:TD): 
Buffer(I, Y) & Send(Y, O1) & Send(Y, O2) & Send(Y, O3)

T3: THEOREM QF2(I,O1, O2, O3) => Deq(I, O1) & Tle(I, O1) & 
    Teq(O1, O2) &     
                                Teq(O2, O3) & Tle(O3, next(I))

T4: THEOREM (QF2(I, O1, O2, O3) => (Deq(O1,I) OR Deq(O2, I) OR Deq(O3, I))
& Tle(I, O1) & (Teq(O1, O2) OR Teq(O1, O3)) & Tle(O3, next(I)))

lemma11: LEMMA A=B =>Send(A,B)

Tref: THEOREM QF2(I, O1, O2, O3) =>  QF1(I, O1, O2, O3)

HRS(I1, I2, I3, O1, O2, O3): bool=EXISTS(A,B,C):
   Send(I1, A) & Send(A,O1) & Sync(A,B) &  
   Send(I2, B) & Send(B,O2) & Sync(B,C) & 
   Send(I3, C) & Send(C,O3) 

T5: THEOREM HRS(I1, I2, I3, O1, O2, O3) => 
 Teq(I1, O1) & (Dneq(I1, O2) OR Dneq(I1, O3)) & Deq(I1, O1)

Q1(I,O1,O2,O3): bool= (Deq(O1, I) OR Deq(O2, I) OR Deq(O3, I)) & 
(Tle(I,O1) OR Tle(I, O2) OR Tle(I, O3)) & (Tle(O3, next(I))
              OR Tle(O2, next(I)) OR Tle(O1, next(I)))

Q2(I,O1,O2,O3): bool= 
(Deq(I,O1) OR Deq(I, O2) OR Deq(I,O3)) & Tle(I, O1) 
 & Teq(O1, O2) & Teq(O2, O3) & Tle(O3, next(I))

Q3(I1,I2,I3, O1,O2,O3:TD): bool=
Teq(I1, O1) & (Dneq(I1, O2) OR Dneq(I1, O3)) & Deq(I1, O1) &
Teq(I2, O2) & (Dneq(I2, O1) OR Dneq(I2, O3)) & Deq(I2, O2) &
Teq(I3, O3) & (Dneq(I3, O2) OR Dneq(I3, O1)) & Deq(I2, O3)

SCom(I1, I2,O1, O2, O3, O4, O5, O6): bool= 
QF1(I1,O1, O2, O3) &  QF2(O1,O4,O5,O6)

Tseq: THEOREM SCom(I1,I2,O1,O2,O3,O4,O5,O6) => 
                Q1(I1,O2,O3,O4) & Q2(O1,O4,O5,O6)

EC(I1, I2, O1, O2, O3): bool=  
QF1(I1,O1, O2, O3) OR QF2(I2,O1,O2,O3) 

Text: theorem EC(I1, I2, O1, O2, O3) => Q1(I1, O1, O2, O3) OR
Q2(I2, O1, O2, O3)

exp: var bool

Conditional(I1,O1,O2,O3)(exp): bool= 
IF exp THEN QF1(I1,O1, O2, O3) ELSE QF2(I1,O1, O2, O3) ENDIF

Tcon: THEOREM Conditional(I1,O1,O2,O3)(true) =>
                      Q1(I1, O1, O2, O3)

PC(I1,I2,O1,O2,O3): bool= 
QF1(I1,O1, O2, O3) & QF2(I2,O1, O2, O3) => 
Q1(I1, O1, O2, O3) & Q2(I2, O1, O2, O3)

PC1(I1,I2,I3,O1,O2,O3:TD): bool= 
QF1(I1,O1, O2, O3) & HRS(I1,I2,I3,O1, O2, O3) &
D(I1) = D(I2) IMPLIES Q1(I1, O1, O2, O3) & 
Q3(I1,I2, I3,O1, O2, O3)

Merge(A,B,C)(n:nat): INDUCTIVE bool=                          
   IF empty?(B) THEN C=A 
   ELSIF empty?(A) THEN C=B 
   ELSIF A`T(0) < B`T(0) THEN 
                 C`T(0) = A`T(0) & C`D(0) = A`D(0) & 
                 Merge(next(A), B, next(C))(n)  
   ELSIF A`T(0) > B`T(0) THEN C`T(0)=B`T(0) & C`D(0)=B`D(0) & 
                 Merge(A, next(B), next(C))(n)
               ELSE empty?(C) ENDIF 

Router(I1, I2, I)(n)(i,j): INDUCTIVE bool=  
I1`T(i) = I`T(n) & 
I1`D(i)= I`D(n) 
 & Router(next(I1),I2,next(I))(n)(i,j)
OR I2`T(j)=I`T(n) & 
I2`D(j)=I`D(n) 
 & Router(I1, next(I2), next(I))(n)(i,j) 

The7: LEMMA Router(A,B,D)(n)(i,j) => A`D(i)=D`D(n) or B`D(j) =D`D(n)

RP(A,B,C,D)(n): bool=  FORALL(i,j:nat):
Merge(A,B,C)(n) & Buffer(C,D) & Router(A,B,D)(n)(i,j)

nTH6: THEOREM RP(A,B,C,D)(n) =>  Tle(C,D) & 
                       (A`D(i)=D`D(n) OR B`D(j) =D`D(n))

Locate(a, T1, (m: upto(T1`length))): RECURSIVE upto(T1`length) =
  (IF m = T1`length
   THEN m
   ELSIF T1`D(m) = a
     THEN m
     ELSE Locate(a, T1, m+1)
     ENDIF)
     MEASURE T1`length - m

end seke





$$$useke.prf
(seke
 (lessp_TCC1 0
  (lessp_TCC1-1 nil 3721541663
   ("" (inst 1 "lambda(x,y:sequence[Time]): false")
    (("" (grind) nil nil)) nil)
   ((irreflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (FALSE const-decl "bool" booleans nil)
    (strict_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (sequence type-eq-decl nil sequences nil)
    (Time type-eq-decl nil seke nil) (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (greaterp_TCC1 0
  (greaterp_TCC1-1 nil 3721541663
   ("" (expand "strict_order?")
    (("" (typepred "<")
      (("" (expand "strict_order?")
        (("" (flatten)
          (("" (split)
            (("1" (expand "irreflexive?") (("1" (propax) nil nil)) nil)
             ("2" (expand "transitive?")
              (("2" (skeep)
                (("2" (inst -4 "z" "y" "x") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((< const-decl "(strict_order?[sequence[Time]])" seke nil)
    (pred type-eq-decl nil defined_types nil)
    (sequence type-eq-decl nil sequences nil)
    (Time type-eq-decl nil seke nil) (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (transitive? const-decl "bool" relations nil)
    (irreflexive? const-decl "bool" relations nil)
    (strict_order? const-decl "bool" orders nil))
   nil))
 (L1 0
  (L1-1 nil 3729575012
   ("" (skosimp) (("" (expand "Teq") (("" (assert) nil nil)) nil)) nil)
   ((Teq const-decl "bool" seke nil)) shostak))
 (L2 0
  (L2-1 nil 3729575030
   ("" (skosimp) (("" (expand "Deq") (("" (assert) nil nil)) nil)) nil)
   ((Deq const-decl "bool" seke nil)) shostak))
 (L3 0
  (L3-1 nil 3729575044
   ("" (skosimp)
    (("" (expand "Tle")
      (("" (assert)
        (("" (typepred "<")
          (("" (expand "strict_order?")
            (("" (flatten)
              (("" (expand "irreflexive?")
                (("" (expand "transitive?")
                  (("" (inst -2 "T(A!1)" "T(B!1)" "T(C!1)")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((irreflexive? const-decl "bool" relations nil)
    (TD type-eq-decl nil seke nil)
    (Data nonempty-type-decl nil seke nil)
    (transitive? const-decl "bool" relations nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil) (Time type-eq-decl nil seke nil)
    (sequence type-eq-decl nil sequences nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_order? const-decl "bool" orders nil)
    (< const-decl "(strict_order?[sequence[Time]])" seke nil)
    (Tle const-decl "bool" seke nil))
   shostak))
 (L4 0
  (L4-1 nil 3729575173
   ("" (skosimp)
    (("" (expand "Tgr")
      (("" (typepred ">")
        (("" (expand "strict_order?")
          (("" (flatten)
            (("" (expand "transitive?")
              (("" (inst -2 "T(A!1)" "T(B!1)" "T(C!1)")
                (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((> const-decl "(strict_order?[sequence[Time]])" seke nil)
    (strict_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (sequence type-eq-decl nil sequences nil)
    (Time type-eq-decl nil seke nil) (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (TD type-eq-decl nil seke nil)
    (Data nonempty-type-decl nil seke nil)
    (transitive? const-decl "bool" relations nil)
    (Tgr const-decl "bool" seke nil))
   shostak))
 (L5 0
  (L5-1 nil 3729575224
   ("" (skosimp)
    (("" (expand "Send")
      (("" (expand "Teq")
        (("" (expand "Deq")
          (("" (flatten)
            (("" (split)
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Teq const-decl "bool" seke nil) (Deq const-decl "bool" seke nil)
    (Send const-decl "bool" seke nil))
   shostak))
 (L6 0
  (L6-1 nil 3729575264
   ("" (skosimp)
    (("" (expand "Buffer")
      (("" (expand "Tle")
        (("" (expand "Tgr")
          (("" (expand "Deq")
            (("" (expand "next")
              (("" (typepred "<" ">")
                (("" (expand "strict_order?")
                  (("" (expand "transitive?")
                    (("" (flatten)
                      (("" (inst -2 "T(A!1)" "T(B!1)" "T(C!1)")
                        (("" (inst -4 "T(A!1)" "T(B!1)" "T(C!1)")
                          (("" (assert)
                            (("" (split)
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil)
                               ("2" (grind) nil nil)
                               ("3" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Tle const-decl "bool" seke nil) (Deq const-decl "bool" seke nil)
    (> const-decl "(strict_order?[sequence[Time]])" seke nil)
    (< const-decl "(strict_order?[sequence[Time]])" seke nil)
    (strict_order? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (sequence type-eq-decl nil sequences nil)
    (Time type-eq-decl nil seke nil) (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (transitive? const-decl "bool" relations nil)
    (TD type-eq-decl nil seke nil)
    (Data nonempty-type-decl nil seke nil)
    (irreflexive? const-decl "bool" relations nil)
    (next const-decl "TD" seke nil) (Tgr const-decl "bool" seke nil)
    (Buffer const-decl "bool" seke nil))
   shostak))
 (l7 0
  (l7-1 nil 3729575583
   ("" (skosimp)
    (("" (expand "Sync")
      (("" (expand "Teq")
        (("" (expand "Dneq")
          (("" (flatten) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((Teq const-decl "bool" seke nil) (Dneq const-decl "bool" seke nil)
    (Sync const-decl "bool" seke nil))
   shostak))
 (T1 0
  (T1-1 nil 3729655652
   ("" (skosimp)
    (("" (expand "QF1")
      (("" (skolem!)
        (("" (expand "Send")
          (("" (expand "Buffer")
            (("" (expand "Teq")
              (("" (expand "Tle")
                (("" (expand "Deq")
                  (("" (expand "next")
                    (("" (flatten)
                      (("" (split)
                        (("1" (assert) nil nil) ("2" (assert) nil nil)
                         ("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Buffer const-decl "bool" seke nil)
    (Tle const-decl "bool" seke nil) (next const-decl "TD" seke nil)
    (Deq const-decl "bool" seke nil) (Teq const-decl "bool" seke nil)
    (Send const-decl "bool" seke nil) (QF1 const-decl "bool" seke nil))
   shostak))
 (T2 0
  (T2-1 nil 3729655743
   ("" (skosimp)
    (("" (expand "QF1")
      (("" (skolem!)
        (("" (expand "Send")
          (("" (expand "Buffer")
            (("" (expand "Teq")
              (("" (expand "Tle")
                (("" (expand "next")
                  (("" (expand "Deq")
                    (("" (flatten)
                      (("" (split)
                        (("1" (assert) nil nil) ("2" (assert) nil nil)
                         ("3" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Buffer const-decl "bool" seke nil)
    (Tle const-decl "bool" seke nil) (Deq const-decl "bool" seke nil)
    (next const-decl "TD" seke nil) (Teq const-decl "bool" seke nil)
    (Send const-decl "bool" seke nil) (QF1 const-decl "bool" seke nil))
   shostak))
 (T3 0
  (T3-1 nil 3729656177
   ("" (skosimp)
    (("" (expand "QF2")
      (("" (skolem!)
        (("" (expand "Buffer")
          (("" (expand "Send")
            (("" (expand "Tle")
              (("" (expand "Teq")
                (("" (expand "Deq")
                  (("" (expand "next")
                    (("" (prop)
                      (("1" (assert) nil nil) ("2" (assert) nil nil)
                       ("3" (assert) nil nil) ("4" (assert) nil nil)
                       ("5" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Send const-decl "bool" seke nil) (Teq const-decl "bool" seke nil)
    (next const-decl "TD" seke nil) (Deq const-decl "bool" seke nil)
    (Tle const-decl "bool" seke nil)
    (Buffer const-decl "bool" seke nil)
    (QF2 const-decl "bool" seke nil))
   shostak))
 (T4 0
  (T4-1 nil 3729665040
   ("" (skosimp)
    (("" (expand "QF2")
      (("" (skolem!)
        (("" (expand "Buffer")
          (("" (expand "Send")
            (("" (expand "Tle")
              (("" (expand "Teq")
                (("" (expand "Deq")
                  (("" (assert)
                    (("" (prop)
                      (("1" (assert) nil nil) ("2" (assert) nil nil)
                       ("3" (assert) nil nil) ("4" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((QF2 const-decl "bool" seke nil)
    (Buffer const-decl "bool" seke nil)
    (Tle const-decl "bool" seke nil) (Deq const-decl "bool" seke nil)
    (Teq const-decl "bool" seke nil) (Send const-decl "bool" seke nil))
   shostak))
 (lemma11 0
  (lemma11-1 nil 3729656917
   ("" (skosimp)
    (("" (expand "Send")
      (("" (expand "Teq")
        (("" (expand "Deq")
          (("" (split) (("1" (assert) nil nil) ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Teq const-decl "bool" seke nil) (Deq const-decl "bool" seke nil)
    (Send const-decl "bool" seke nil))
   shostak))
 (Tref 0
  (Tref-1 nil 3729658076
   ("" (skosimp)
    (("" (expand "QF2")
      (("" (expand "QF1")
        (("" (skolem!)
          (("" (inst 1 "I!1")
            (("" (lemma "lemma11")
              (("" (inst -1 "Y!1" "O1!1")
                (("" (skosimp)
                  (("" (expand "Buffer")
                    (("" (expand "Send")
                      (("" (expand "Tle")
                        (("" (expand "Teq")
                          (("" (expand "Deq")
                            (("" (expand "next")
                              ((""
                                (flatten)
                                ((""
                                  (split)
                                  (("1" (assert) nil nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((QF2 const-decl "bool" seke nil)
    (lemma11 formula-decl nil seke nil)
    (Send const-decl "bool" seke nil) (Teq const-decl "bool" seke nil)
    (next const-decl "TD" seke nil) (Deq const-decl "bool" seke nil)
    (Tle const-decl "bool" seke nil)
    (Buffer const-decl "bool" seke nil) (TD type-eq-decl nil seke nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Time type-eq-decl nil seke nil) (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (Data nonempty-type-decl nil seke nil)
    (QF1 const-decl "bool" seke nil))
   shostak))
 (T5 0
  (T5-1 nil 3729658631
   ("" (skosimp)
    (("" (expand "HRS")
      (("" (skolem!)
        (("" (expand "Send")
          (("" (expand "Sync")
            (("" (expand "Teq")
              (("" (expand "Deq")
                (("" (expand "Dneq")
                  (("" (flatten)
                    (("" (split)
                      (("1" (assert) nil nil) ("2" (assert) nil nil)
                       ("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((HRS const-decl "bool" seke nil) (Send const-decl "bool" seke nil)
    (Teq const-decl "bool" seke nil) (Dneq const-decl "bool" seke nil)
    (Deq const-decl "bool" seke nil) (Sync const-decl "bool" seke nil))
   shostak))
 (Tseq 0
  (Tseq-1 nil 3729658888
   ("" (skosimp)
    (("" (expand "SCom")
      (("" (expand "QF1")
        (("" (expand "QF2")
          (("" (expand "Q1")
            (("" (expand "Q2")
              (("" (flatten)
                (("" (skolem!)
                  (("" (skolem!)
                    (("" (expand "Send")
                      (("" (expand "Buffer")
                        (("" (expand "Teq")
                          (("" (expand "Tle")
                            (("" (expand "Deq")
                              ((""
                                (expand "next")
                                ((""
                                  (assert)
                                  ((""
                                    (flatten)
                                    ((""
                                      (split)
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil)
                                       ("3" (assert) nil nil)
                                       ("4" (assert) nil nil)
                                       ("5" (assert) nil nil)
                                       ("6" (assert) nil nil)
                                       ("7" (assert) nil nil)
                                       ("8" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((QF1 const-decl "bool" seke nil) (Q1 const-decl "bool" seke nil)
    (Buffer const-decl "bool" seke nil)
    (Tle const-decl "bool" seke nil) (next const-decl "TD" seke nil)
    (Deq const-decl "bool" seke nil) (Teq const-decl "bool" seke nil)
    (Send const-decl "bool" seke nil) (Q2 const-decl "bool" seke nil)
    (QF2 const-decl "bool" seke nil) (SCom const-decl "bool" seke nil))
   shostak))
 (Text 0
  (Text-1 nil 3729660528
   ("" (skosimp)
    (("" (expand "EC")
      (("" (expand "QF1")
        (("" (expand "QF2")
          (("" (expand "Q1")
            (("" (expand "Q2")
              (("" (expand "Send")
                (("" (expand "Buffer")
                  (("" (expand "Deq")
                    (("" (expand "Tle")
                      (("" (expand "Teq")
                        (("" (expand "next")
                          (("" (split)
                            (("1" (skolem!)
                              (("1"
                                (flatten)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (skolem!)
                              (("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((EC const-decl "bool" seke nil) (QF2 const-decl "bool" seke nil)
    (Q2 const-decl "bool" seke nil) (Buffer const-decl "bool" seke nil)
    (Tle const-decl "bool" seke nil) (next const-decl "TD" seke nil)
    (Teq const-decl "bool" seke nil) (Deq const-decl "bool" seke nil)
    (Send const-decl "bool" seke nil) (Q1 const-decl "bool" seke nil)
    (QF1 const-decl "bool" seke nil))
   shostak))
 (Tcon 0
  (Tcon-1 nil 3729660806
   ("" (skosimp)
    (("" (expand "Conditional")
      (("" (expand "QF1")
        (("" (expand "Q1")
          (("" (expand "Send")
            (("" (expand "Buffer")
              (("" (skolem!)
                (("" (expand "Tle")
                  (("" (expand "Teq")
                    (("" (expand "Deq")
                      (("" (expand "next")
                        (("" (flatten) (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Conditional const-decl "bool" seke nil)
    (Q1 const-decl "bool" seke nil) (Buffer const-decl "bool" seke nil)
    (Tle const-decl "bool" seke nil) (Deq const-decl "bool" seke nil)
    (next const-decl "TD" seke nil) (Teq const-decl "bool" seke nil)
    (Send const-decl "bool" seke nil) (QF1 const-decl "bool" seke nil))
   shostak))
 (The7 0
  (The7-1 nil 3729661288
   ("" (induct "n")
    (("1" (skosimp)
      (("1" (expand "Router") (("1" (assert) nil nil)) nil)) nil)
     ("2" (skosimp*)
      (("2" (inst?)
        (("2" (inst?)
          (("2" (inst?)
            (("2" (expand "Router") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Router inductive-decl "bool" seke nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (TD type-eq-decl nil seke nil) (Time type-eq-decl nil seke nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sequence type-eq-decl nil sequences nil)
    (Data nonempty-type-decl nil seke nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (nTH6 0
  (nTH6-1 nil 3729599767
   ("" (induct "n")
    (("1" (skosimp)
      (("1" (expand "RP")
        (("1" (inst -1 "i!1" "j!1")
          (("1" (expand "Merge")
            (("1" (expand "Buffer")
              (("1" (expand "Router")
                (("1" (flatten)
                  (("1" (assert) (("1" (prop) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (inst -1 "A!1" "B!1" "C!1" "D!1" "i!1" "j!1")
        (("2" (expand RP -2)
          (("2" (inst -2 "i!1" "j!2")
            (("2" (expand "Merge")
              (("2" (expand "Buffer")
                (("2" (expand "Router")
                  (("2" (lift-if)
                    (("2" (expand "Tle")
                      (("2" (assert)
                        (("2" (split)
                          (("1" (prop) nil nil) ("2" (prop) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Buffer const-decl "bool" seke nil)
    (Router inductive-decl "bool" seke nil)
    (Merge inductive-decl "bool" seke nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Tle const-decl "bool" seke nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (RP const-decl "bool" seke nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (TD type-eq-decl nil seke nil) (Time type-eq-decl nil seke nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sequence type-eq-decl nil sequences nil)
    (Data nonempty-type-decl nil seke nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (Locate_TCC1 0
  (Locate_TCC1-1 nil 3729816155 ("" (subtype-tcc) nil nil) nil nil))
 (Locate_TCC2 0
  (Locate_TCC2-1 nil 3729816155 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Data nonempty-type-decl nil seke nil)
    (sequence type-eq-decl nil sequences nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil) (Time type-eq-decl nil seke nil)
    (TD type-eq-decl nil seke nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (Locate_TCC3 0
  (Locate_TCC3-1 nil 3729816155 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil)))

